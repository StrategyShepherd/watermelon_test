Ideally a URL shortner  should be able to do two thigns

// given that we can't process all URL lengths//
Ideally we should probarly look at limiting the size of the request that goes inside of the API
Ideally we can do this server-side
Create a URl Alais

// need to also perform URL validation as well that is valid

/// Ideally we could implement this in-memory, but ideally we extend the creation of database to having a new table /// with some sort  of hashfed value
// at this stage we don't need to deal with hash collisions at the meoment
/// but we can introduce behaviour such as
/// expriation dates // creation time and created by authors
/// we'd also need a library / fucntion to generate short url, at the moment we can do a simple hash fucntion to retridve
/// once created we'd need to mark this in a whitelist of sorts(can filter this out, in the event of hash colission
/// Response structue (ideally a response strucutre should be inline with returning a 200 okay/ created or 201
// ideally we could give an option for a custom-named Url shortcode that might be worth considering adding within the api calsl

Delete a URL Alais
/// this should be a db call basically// check if not in use by any other resoruce
// and then delete a URL mapping, allowing that value to be used for another alias
// We expect deleting a URL alais to be imdepontent so ideally deleting for the same resource id, should also respond in the same manner for subsequent requests

// resposne code here should be 204


/// Redirect al lrequests to an alias to the full URL should happen at the api-level scope
/// Ideally we can return a 302 or a 301 as respone

// Slight pause in dev 3:46
/// need to think optimal database design a little bit more ideally at the moment
// we have create url/delete URL wihtout redirection and proper response handling// ideally if we current the setup
// where (url,alias) -> stored
// esentilaly we can make a small optimization we store all generated aliases in memory and then we can filter out and have some retry logic



/// Narrative Docs ///

1. I realized that I should have implement the middleware of redirection (I realized that mistake as I finished the exercise, but ideally it could have gone within the actix api main bit
/// My Logic  would have been to check whether the alias is already in the DB// and produce a redirection response with 304 (as application/json)
// Ideally could be extended with rate limiting
/// Ideally I aimed to seperate the two calls
/// one for create URL with an Alias
// one for delete URL with an Alias
// I ended up creating small optimization for the database// ensuring that postgres tracks incremting ids
/// Also I debated around what to do with collisions of URL hashes// but realizied that most optimal to do within the time-constraints// was just to do a keep a list of in-memory aliases and just do just a check on these
// Additionally I also conisdreed having a function to deal with expiring aliases/ e.g A user selects an Alias with an expiring 30 seconds/ 50 seconds/ I think that could have implemented on the DB side with some triggers
